# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

AWSTemplateFormatVersion: '2010-09-09'

####################
## Stack Metadata ##
####################

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: General Configuration
        Parameters:
          - VPCName
      - Label:
          default: Availability Zones Configuration
        Parameters:
          - AvailabilityZones
          - NumberOfAZs
      - Label:
          default: Network and Endpoint Configuration
        Parameters:
          - CreatePublicSubnets
          - CreateS3Endpoint
          - CreateDynamoDBEndpoint
      - Label:
          default: Execution role
        Parameters:
          - CreateExecutionRole
          - S3BucketResource
          - LdapTokenArn
          - LdapCertArn
    ParameterLabels:
      AvailabilityZones:
        default: Availability Zones
      VPCName:
        default: Name of your VPC
      NumberOfAZs:
        default: Number of Availability Zones
      CreatePublicSubnets:
        default: Create public subnets
      CreateS3Endpoint:
        default: Create an S3 endpoint
      CreateDynamoDBEndpoint:
        default: Create a DynamoDB endpoint
      CreateExecutionRole:
        default: Create an execution role for SageMaker Hyperpod
      S3BucketResource:
        default: IAM resource for S3 bucket that holds lifecycle scripts
      LdapTokenArn:
        default: ARN of the AWS Secret Manager secret which holds the LDAP authentication token
      LdapCertArn:
        default: ""

######################
## Stack Parameters ##
######################

Parameters:

  VPCName:
    Description: 'Name of your VPC'
    Default: 'ML VPC'
    Type: String

  AvailabilityZones:
    Description: 'List of Availability Zones to use for the subnets in the VPC. Note: The logical order is preserved when deploying subnets.'
    Type: List<AWS::EC2::AvailabilityZone::Name>

  NumberOfAZs:
    AllowedValues:
      - '2'
      - '3'
      - '4'
      - '5'
      - '6'
    Default: '2'
    Description: Number of Availability Zones to use in the VPC. This must match your selections in the list of Availability Zones parameter.
    Type: String

  CreatePublicSubnets:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    Description:
      Set to false to only create private subnets.
    Type: String

  CreateS3Endpoint:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    Description:
      Set to false if to avoid creating an S3 endpoint on your VPC.
    Type: String

  CreateDynamoDBEndpoint:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    Description:
      Set to false if to avoid creating a DynamoDB endpoint on your VPC.
    Type: String

  CreateExecutionRole:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
    Description:
      Set to true to create an execution role.
    Type: String

  S3BucketResource:
    Description: IAM resource for S3 bucket that holds lifecycle scripts
    Type: String
    Default: "arn:aws:s3:::sagemaker-*"

  LdapTokenArn:
    Description: ARN of the AWS Secret Manager secret which holds the LDAP authentication token
    Type: String
    Default: ""

  LdapCertArn:
    Description: ARN of the certificate in the AWS Certificate Manager.
    Type: String
    Default: ""

###############################
## Conditions for Parameters ##
###############################

Conditions:
  3AZCondition: !Or
    - !Equals [!Ref 'NumberOfAZs', '3']
    - !Condition '4AZCondition'
  4AZCondition: !Or
    - !Equals [!Ref 'NumberOfAZs', '4']
    - !Condition '5AZCondition'
  5AZCondition: !Or
    - !Equals [!Ref 'NumberOfAZs', '5']
    - !Condition '6AZCondition'
  6AZCondition: !Equals [!Ref 'NumberOfAZs', '6']

  3AZConditionPublic: !And
    - !Condition 'PublicSubnetCondition'
    - !Condition '3AZCondition'
  4AZConditionPublic: !And
    - !Condition 'PublicSubnetCondition'
    - !Condition '4AZCondition'
  5AZConditionPublic: !And
    - !Condition 'PublicSubnetCondition'
    - !Condition '5AZCondition'
  6AZConditionPublic: !And
    - !Condition 'PublicSubnetCondition'
    - !Condition '6AZCondition'

  PublicSubnetCondition: !Equals [!Ref 'CreatePublicSubnets', 'true']
  S3EndpointCondition: !Equals [!Ref 'CreateS3Endpoint', 'true']
  DynamoDBEndpointCondition: !Equals [!Ref 'CreateDynamoDBEndpoint', 'true']
  ExecutionRoleCondition: !Equals [!Ref 'CreateExecutionRole', 'true']
  LdapPolicyCondition: !And
    - !Equals [!Ref 'CreateExecutionRole', 'true']
    - !Not [!Equals [!Ref 'LdapTokenArn', '']]
    - !Not [!Equals [!Ref 'LdapCertArn', '']]


#########################
## VPC & Network Setup ##
#########################

Mappings:
  Networking:
    VPC:
      CIDR0: 10.0.0.0/16
      CIDR1: 10.1.0.0/16
      CIDR2: 10.2.0.0/16
      CIDR3: 10.3.0.0/16

Resources:
  # Create a VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: !FindInMap [Networking, VPC, CIDR0]
      Tags:
        - Key: Name
          Value: !Ref VPCName

  FlowLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: vpc-flow-logs.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: flowlogs-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
            Resource: !GetAtt FlowLogsGroup.Arn
  FlowLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7

  FlowLogVPC:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt FlowLogsRole.Arn
      LogGroupName: FlowLogsGroup
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL

  VpcCidrBlock1:
    Type: AWS::EC2::VPCCidrBlock
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [Networking, VPC, CIDR1]

  VpcCidrBlock2:
    Condition: 3AZCondition
    Type: AWS::EC2::VPCCidrBlock
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [Networking, VPC, CIDR2]

  VpcCidrBlock3:
    Condition: 5AZCondition
    Type: AWS::EC2::VPCCidrBlock
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [Networking, VPC, CIDR3]

  # Create an IGW and add it to the VPC
  InternetGateway:
    Condition: PublicSubnetCondition
    Type: AWS::EC2::InternetGateway

  GatewayToInternet:
    Condition: PublicSubnetCondition
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Create a NAT GW then add it to the public subnet
  NATGateway:
    Condition: PublicSubnetCondition
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  ElasticIP:
    Condition: PublicSubnetCondition
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow EFA communication for Multi-Node Parallel Batch jobs
      VpcId: !Ref VPC
  EFASecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: All to all communication for EFA Ingress within Security Group
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      GroupId: !Ref SecurityGroup
      SourceSecurityGroupId: !Ref SecurityGroup
  EFASecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: All to all communication for EFA Egress  within Security Group
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      GroupId: !Ref SecurityGroup
      DestinationSecurityGroupId: !Ref SecurityGroup
  EFASecurityGroupEgressECS:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: All to all communication for Egress to all
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      GroupId: !Ref SecurityGroup
      CidrIp: 0.0.0.0/0

  # Build the public subnets
  PublicSubnet1:
    Condition: PublicSubnetCondition
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt VPC.CidrBlock, 2, 8 ]]
      AvailabilityZone: !Select [ 0, !Ref AvailabilityZones]
      Tags:
        - Key: Name
          Value: !Join [ ' ', [ !Ref VPCName, 'Public Subnet', !Select [ 0, !Ref AvailabilityZones] ] ]

  PublicSubnet2:
    Condition: PublicSubnetCondition
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt VPC.CidrBlock, 2, 8 ]]
      AvailabilityZone: !Select [ 1, !Ref AvailabilityZones]
      Tags:
        - Key: Name
          Value: !Join [ ' ', [ !Ref VPCName, 'Public Subnet', !Select [ 1, !Ref AvailabilityZones]] ]

  PublicSubnet3:
    Condition: 3AZConditionPublic
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      CidrBlock: !Select [ 10, !Cidr [ !GetAtt VPC.CidrBlock, 12, 8 ]]
      AvailabilityZone: !Select [ 2, !Ref AvailabilityZones]
      Tags:
        - Key: Name
          Value: !Join [ ' ', [ !Ref VPCName, 'Public Subnet', !Select [ 2, !Ref AvailabilityZones]] ]

  PublicSubnet4:
    Condition: 4AZConditionPublic
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      CidrBlock: !Select [ 11, !Cidr [ !GetAtt VPC.CidrBlock, 12, 8 ]]
      AvailabilityZone: !Select [ 3, !Ref AvailabilityZones]
      Tags:
        - Key: Name
          Value: !Join [ ' ', [ !Ref VPCName, 'Public Subnet', !Select [ 3, !Ref AvailabilityZones]] ]

  PublicSubnet5:
    Condition: 5AZConditionPublic
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      CidrBlock: !Select [ 20, !Cidr [ !GetAtt VPC.CidrBlock, 22, 8 ]]
      AvailabilityZone: !Select [ 4, !Ref AvailabilityZones]
      Tags:
        - Key: Name
          Value: !Join [ ' ', [ !Ref VPCName, 'Public Subnet', !Select [ 4, !Ref AvailabilityZones]] ]

  PublicSubnet6:
    Condition: 6AZConditionPublic
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      CidrBlock: !Select [ 21, !Cidr [ !GetAtt VPC.CidrBlock, 22, 8 ]]
      AvailabilityZone: !Select [ 5, !Ref AvailabilityZones]
      Tags:
        - Key: Name
          Value: !Join [ ' ', [ !Ref VPCName, 'Public Subnet', !Select [ 5, !Ref AvailabilityZones]] ]

  # Create the private subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: [VpcCidrBlock1]
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 0, !Cidr [ !FindInMap [Networking, VPC, CIDR1], 2, 15 ]]
      AvailabilityZone: !Select [ 0, !Ref AvailabilityZones]
      Tags:
        - Key: Name
          Value: !Join [ ' ', [ !Ref VPCName, 'Private Subnet', !Select [ 0, !Ref AvailabilityZones]] ]

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: [VpcCidrBlock1]
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 1, !Cidr [ !FindInMap [Networking, VPC, CIDR1], 2, 15 ]]
      AvailabilityZone: !Select [ 1, !Ref AvailabilityZones]
      Tags:
        - Key: Name
          Value: !Join [ ' ', [ !Ref VPCName, 'Private Subnet', !Select [ 1, !Ref AvailabilityZones]] ]

  PrivateSubnet3:
    Condition: 3AZCondition
    Type: AWS::EC2::Subnet
    DependsOn: [VpcCidrBlock2]
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 0, !Cidr [ !FindInMap [Networking, VPC, CIDR2], 2, 15 ]]
      AvailabilityZone: !Select [ 2, !Ref AvailabilityZones]
      Tags:
        - Key: Name
          Value: !Join [ ' ', [ !Ref VPCName, 'Private Subnet', !Select [ 2, !Ref AvailabilityZones]] ]

  PrivateSubnet4:
    Condition: 4AZCondition
    Type: AWS::EC2::Subnet
    DependsOn: [VpcCidrBlock2]
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 1, !Cidr [ !FindInMap [Networking, VPC, CIDR2], 2, 15 ]]
      AvailabilityZone: !Select [ 3, !Ref AvailabilityZones]
      Tags:
        - Key: Name
          Value: !Join [ ' ', [ !Ref VPCName, 'Private Subnet', !Select [ 3, !Ref AvailabilityZones]] ]

  PrivateSubnet5:
    Condition: 5AZCondition
    Type: AWS::EC2::Subnet
    DependsOn: [VpcCidrBlock3]
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 0, !Cidr [ !FindInMap [Networking, VPC, CIDR3], 2, 15 ]]
      AvailabilityZone: !Select [ 4, !Ref AvailabilityZones]
      Tags:
        - Key: Name
          Value: !Join [ ' ', [ !Ref VPCName, 'Private Subnet', !Select [ 4, !Ref AvailabilityZones]] ]

  PrivateSubnet6:
    Condition: 6AZCondition
    Type: AWS::EC2::Subnet
    DependsOn: [VpcCidrBlock3]
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 1, !Cidr [ !FindInMap [Networking, VPC, CIDR3], 2, 15 ]]
      AvailabilityZone: !Select [ 5, !Ref AvailabilityZones]
      Tags:
        - Key: Name
          Value: !Join [ ' ', [ !Ref VPCName, 'Private Subnet', !Select [ 5, !Ref AvailabilityZones]] ]

  # Create and set the public route table
  PublicRouteTable:
    Condition: PublicSubnetCondition
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC

  PublicRoute1:
    Condition: PublicSubnetCondition
    Type: AWS::EC2::Route
    DependsOn:
      # Fix random Cfn fails. See: https://stackoverflow.com/a/50335773
      - GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  # Then the private route table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC

  PrivateRouteToInternet:
    Condition: PublicSubnetCondition
    Type: AWS::EC2::Route
    DependsOn:
      - VPC
      - NATGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NATGateway

  # Associate the public route table to the public subnet
  PublicSubnetRouteTableAssociation1:
    Condition: PublicSubnetCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PublicRouteTable
      - PublicSubnet1
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Condition: PublicSubnetCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PublicRouteTable
      - PublicSubnet2
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation3:
    Condition: 3AZConditionPublic
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PublicRouteTable
      - PublicSubnet3
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation4:
    Condition: 4AZConditionPublic
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PublicRouteTable
      - PublicSubnet4
    Properties:
      SubnetId: !Ref PublicSubnet4
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation5:
    Condition: 5AZConditionPublic
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PublicRouteTable
      - PublicSubnet5
    Properties:
      SubnetId: !Ref PublicSubnet5
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation6:
    Condition: 6AZConditionPublic
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PublicRouteTable
      - PublicSubnet6
    Properties:
      SubnetId: !Ref PublicSubnet6
      RouteTableId: !Ref PublicRouteTable

  # and the private subnets to the private route table
  PrivateSubnet1RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnet2RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnet3RTAssociation:
    Condition: 3AZCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnet4RTAssociation:
    Condition: 4AZCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet4
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnet5RTAssociation:
    Condition: 5AZCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet5
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnet6RTAssociation:
    Condition: 6AZCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet6
      RouteTableId: !Ref PrivateRouteTable

  # S3 endpoint
  S3Endpoint:
    Condition: S3EndpointCondition
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
            - Effect: Allow
              Principal: '*'
              Action:
                - '*'
              Resource:
                - '*'
      RouteTableIds:
        - !If [PublicSubnetCondition, !Ref PublicRouteTable, !Ref AWS::NoValue]
        - !Ref PrivateRouteTable
      ServiceName: !Join
        - ''
        - - com.amazonaws.
          - !Ref AWS::Region
          - .s3
      VpcId: !Ref VPC

  # DynamoDB endpoint
  DynamoDBEndpoint:
    Condition: DynamoDBEndpointCondition
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
            - Effect: Allow
              Principal: '*'
              Action:
                - '*'
              Resource:
                - '*'
      RouteTableIds:
        - !If [PublicSubnetCondition, !Ref PublicRouteTable, !Ref AWS::NoValue]
        - !Ref PrivateRouteTable
      ServiceName: !Join
        - ''
        - - com.amazonaws.
          - !Ref AWS::Region
          - .dynamodb
      VpcId: !Ref VPC

  # Create policy for LDAP access
  LdapSecretPolicy:
    Condition: LdapPolicyCondition
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Policy to retrieve LDAP authentication secret
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AdditionToEnableSssdLdapsIntegration
            Effect: Allow
            Action:
              - acm:GetCertificate
              - secretsmanager:GetSecretValue
            Resource:
              - !Ref LdapTokenArn
              - !Ref LdapCertArn

  # Create execution role
  ExecutionRole:
    Condition: ExecutionRoleCondition
    Type: AWS::IAM::Role
    DependsOn: LdapSecretPolicy
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Ref LdapSecretPolicy
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:PutLogEvents"
                  - "logs:CreateLogStream"
                  - "logs:DescribeLogStreams"
                Resource:
                  - "arn:aws:logs:*:*:log-group:/aws/sagemaker/Clusters/*:log-stream:*"
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                Resource:
                  - "arn:aws:logs:*:*:log-group:/aws/sagemaker/Clusters/*"
              - Effect: Allow
                Action:
                  - "cloudwatch:PutMetricData"
                Resource:
                  - "*"
                Condition:
                  StringEquals:
                    "cloudwatch:namespace": "/aws/sagemaker/Clusters"
              - Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:GetObject"
                Resource:
                  - !Ref S3BucketResource
                  - !Join [ '/', [ !Ref S3BucketResource, '*' ] ]
              - Effect: Allow
                Action:
                  - "ssmmessages:CreateControlChannel"
                  - "ssmmessages:CreateDataChannel"
                  - "ssmmessages:OpenControlChannel"
                  - "ssmmessages:OpenDataChannel"
                Resource:
                  - "*"
              - Sid: AdditionToEnableVpcConfig
                Effect: Allow
                Action:
                  - "ec2:CreateNetworkInterface"
                  - "ec2:CreateNetworkInterfacePermission"
                  - "ec2:DeleteNetworkInterface"
                  - "ec2:DeleteNetworkInterfacePermission"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:DescribeVpcs"
                  - "ec2:DescribeDhcpOptions"
                  - "ec2:DescribeSubnets"
                  - "ec2:DescribeSecurityGroups"
                  - "ec2:DetachNetworkInterface"
                Resource:
                  - "*"
              - Sid: Addition2ToEnableVpcConfig
                Effect: Allow
                Action:
                  - "ec2:CreateTags"
                Resource:
                  - "arn:aws:ec2:*:*:network-interface/*"
              - Sid: WriteClusterMetricsToAMP
                Effect: Allow
                Action:
                  - aps:RemoteWrite
                Resource:
                  - !GetAtt APSWorkspace.Arn

  AmazonGrafanaWorkspaceIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - grafana.amazonaws.com
            Action:
              - 'sts:AssumeRole'

  AmazonGrafanaPrometheusPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AmazonGrafana_Prometheus_policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - aps:ListWorkspaces
          - aps:DescribeWorkspace
          - aps:QueryMetrics
          - aps:GetLabels
          - aps:GetSeries
          - aps:GetMetricMetadata
          Resource: "*"
      Roles: [!Ref AmazonGrafanaWorkspaceIAMRole]

  AmazonGrafanaWorkspace:
    Type: 'AWS::Grafana::Workspace'
    Properties:
      AccountAccessType: CURRENT_ACCOUNT
      Name: !Sub ${AWS::StackName}-Dashboard
      Description: Amazon Grafana Workspace to monitor SageMaker Cluster
      AuthenticationProviders:
        - AWS_SSO
      PermissionType: SERVICE_MANAGED
      RoleArn: !GetAtt
        - AmazonGrafanaWorkspaceIAMRole
        - Arn
      DataSources: ["CLOUDWATCH", "PROMETHEUS"]
      OrganizationRoleName: "ADMIN"

  APSWorkspace:
    Type: AWS::APS::Workspace
    Properties:
      Alias: !Sub ${AWS::StackName}-Hyperpod-WorkSpace
      Tags:
      - Key: Name
        Value: SageMaker Hyperpod PrometheusMetrics

#############
## Outputs ##
#############
Outputs:
  VPC:
    Value: !Ref VPC
    Description: ID of the VPC
    Export:
      Name: !Sub ${AWS::StackName}-VPC
  PublicSubnet:
    Condition: PublicSubnetCondition
    Value: !Join
      - ','
      - - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !If [3AZConditionPublic, !Ref PublicSubnet3, !Ref AWS::NoValue]
        - !If [4AZConditionPublic, !Ref PublicSubnet4, !Ref AWS::NoValue]
        - !If [5AZConditionPublic, !Ref PublicSubnet5, !Ref AWS::NoValue]
        - !If [6AZConditionPublic, !Ref PublicSubnet6, !Ref AWS::NoValue]
    Description: ID of the public subnet
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet
  PrivateSubnets:
    Value: !Join
      - ','
      - - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !If [3AZCondition, !Ref PrivateSubnet3, !Ref AWS::NoValue]
        - !If [4AZCondition, !Ref PrivateSubnet4, !Ref AWS::NoValue]
        - !If [5AZCondition, !Ref PrivateSubnet5, !Ref AWS::NoValue]
        - !If [6AZCondition, !Ref PrivateSubnet6, !Ref AWS::NoValue]
    Description: ID of the private subnets
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnets
  SecurityGroup:
    Value: !Join
      - ','
      - - !Ref SecurityGroup
    Description: SecurityGroup for Batch
    Export:
      Name: !Sub ${AWS::StackName}-SecurityGroup
  ExecutionRole:
    Description: ARN of the execution role
    Value: !If [ExecutionRoleCondition, !GetAtt ExecutionRole.Arn, !Ref AWS::NoValue]
    Export:
      Name: !Sub ${AWS::StackName}-ExecutionRole
  AMPRemoteWriteURL:
    Value: !Join ["" , [ !GetAtt APSWorkspace.PrometheusEndpoint , "api/v1/remote_write" ]]
  GrafanWorkspaceURL:
    Value: !Join ["" , [ "https://", !GetAtt AmazonGrafanaWorkspace.Endpoint ]]
